/*
 * com.cownew.cownewsql.imsql.jdbc.DBStatement.java
 * Created on 2007-10-16 ÏÂÎç05:23:14 by ÑîÖÐ¿Æ
 */

package com.cownew.cownewsql.imsql.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class DBStatement implements Statement
{
	private Statement statement;	
	private DBConnection conn;

	public DBStatement(DBConnection conn,Statement statement)
	{
		super();
		this.conn = conn;
		this.statement = statement;
	}
	
	protected String translateSQL(String sql) throws SQLException
	{
		return conn.translateSQL(sql);
	}

	public void addBatch(String sql) throws SQLException
	{
		statement.addBatch(translateSQL(sql));
	}

	public void cancel() throws SQLException
	{
		statement.cancel();
	}

	public void clearBatch() throws SQLException
	{
		statement.clearBatch();
	}

	public void clearWarnings() throws SQLException
	{
		statement.clearWarnings();
	}

	public void close() throws SQLException
	{
		statement.close();
	}

	public boolean execute(String sql) throws SQLException
	{
		return statement.execute(translateSQL(sql));
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException
	{
		return statement.execute(translateSQL(sql),autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException
	{
		return statement.execute(translateSQL(sql),columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException
	{
		return statement.execute(translateSQL(sql),columnNames);
	}

	public int[] executeBatch() throws SQLException
	{
		return statement.executeBatch();
	}

	public ResultSet executeQuery(String sql) throws SQLException
	{
		return statement.executeQuery(translateSQL(sql));
	}

	public int executeUpdate(String sql) throws SQLException
	{
		return statement.executeUpdate(translateSQL(sql));
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException
	{
		return statement.executeUpdate(translateSQL(sql),autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException
	{
		return statement.executeUpdate(translateSQL(sql),columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException
	{
		return statement.executeUpdate(translateSQL(sql),columnNames);
	}

	public Connection getConnection() throws SQLException
	{
		return statement.getConnection();
	}

	public int getFetchDirection() throws SQLException
	{
		return statement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException
	{
		return statement.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException
	{
		return statement.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException
	{
		return statement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException
	{
		return statement.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException
	{
		return statement.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException
	{
		return statement.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException
	{
		return statement.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException
	{
		return statement.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException
	{
		return statement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException
	{
		return statement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException
	{
		return statement.getResultSetType();
	}

	public int getUpdateCount() throws SQLException
	{
		return statement.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException
	{
		return statement.getWarnings();
	}

	public boolean isClosed() throws SQLException
	{
		return statement.isClosed();
	}

	public boolean isPoolable() throws SQLException
	{
		return statement.isPoolable();
	}

	public void setCursorName(String name) throws SQLException
	{
		statement.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException
	{
		statement.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException
	{
		statement.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException
	{
		statement.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException
	{
		statement.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException
	{
		statement.setMaxRows(max);
	}

	public void setPoolable(boolean poolable) throws SQLException
	{
		statement.setPoolable(poolable);
	}

	public void setQueryTimeout(int seconds) throws SQLException
	{
		statement.setQueryTimeout(seconds);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException
	{
		return statement.isWrapperFor(iface);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException
	{
		return statement.unwrap(iface);
	}

}
